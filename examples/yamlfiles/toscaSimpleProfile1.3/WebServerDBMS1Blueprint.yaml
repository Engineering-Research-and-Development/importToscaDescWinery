tosca_definitions_version: tosca_simple_yaml_1_3

description: >
  TOSCA simple profile with WordPress, a web server, a MySQL DBMS hosting the application's database content on the same server. Does not have input defaults or constraints.

topology_template:
  inputs:
    cpus:
      type: integer
      description: Number of CPUs for the server.
    db_name:
      type: string
      description: The name of the database.
    db_user:
      type: string
      description: The username of the DB user.
    db_pwd:
      type: string
      description: The WordPress database admin account password.
    db_root_pwd:
      type: string
      description: Root password for MySQL.
    db_port:
      type: tosca.datatypes.network.PortDef
      description: Port for the MySQL database

  node_templates:
    wordpress:
      type: tosca.nodes.WebApplication.WordPress
      properties: 
        context_root: { get_input: context_root }
      requirements:
        - database_endpoint:
            node: mysql_database
            relationship: ConnectsTo_mySQL
            capability: database_endpoint
        - host:
            node: webserver
            relationship: HostedOn_WP_server
            capability: host
      interfaces:
        Standard:
          type: tosca.interfaces.node.lifecycle.Standard
          operations:
            create: wordpress_install.sh
            configure: 
              implementation: wordpress_configure.sh
              inputs:
                wp_db_name: { get_property: [ mysql_database, name ] }
                wp_db_user: { get_property: [ mysql_database, user ] }
                wp_db_password: { get_property: [ mysql_database, password ] }   
                wp_db_port: { get_property: [ SELF, database_endpoint, port ] }

    mysql_database:
      type: tosca.nodes.Database
      properties:
        name: { get_input: db_name } 
        user: { get_input: db_user }
        password: { get_input: db_pwd }
        port: { get_input: db_port }
      requirements:
        - host:
            node: mysql_dbms
            relationship: HostedOn_mySQL_DBMS
            capability: host
      capabilities:
        database_endpoint:
          properties:
            port: { get_input: db_port }
      interfaces:
        Standard:
          type: tosca.interfaces.node.lifecycle.Standard
          operations:
            configure: mysql_database_configure.sh

    mysql_dbms:
      type: tosca.nodes.DBMS
      properties:
        root_password: { get_input: db_root_pwd }
        port: { get_input: db_port }
      requirements:
        - host:
            node: server
            relationship: HostedOn_DBMS_server
            capability: host
      interfaces:
        Standard:
          type: tosca.interfaces.node.lifecycle.Standard
          inputs:
            db_root_password: { get_property: [ mysql_dbms, root_password ] }
          operations:
            create: mysql_dbms_install.sh
            start: mysql_dbms_start.sh
            configure: mysql_dbms_configure.sh

    webserver:
      type: tosca.nodes.WebServer
      requirements:
        - host:
            node: server
            relationship: HostedOn_WS_server
            capability: host
      interfaces:
        Standard:
          type: tosca.interfaces.node.lifecycle.Standard
          operations:
            create: webserver_install.sh
            start: webserver_start.sh

    server:
      type: tosca.nodes.Compute
      capabilities:
        host:
          properties:
            disk_size: 10 GB
            num_cpus: { get_input: cpus }
            mem_size: 4096 MB
        os:
          properties:
            architecture: x86_64 
            type: linux  
            distribution: fedora  
            version: 17.0

  relationship_templates:
    HostedOn_DBMS_server:
      type: tosca.relationships.HostedOn
    HostedOn_mySQL_DBMS:
      type: tosca.relationships.HostedOn
    HostedOn_WP_server:
      type: tosca.relationships.HostedOn
    HostedOn_WS_server:
      type: tosca.relationships.HostedOn
    ConnectsTo_mySQL:
      type: tosca.relationships.ConnectsTo
      properties:
        credential:
          token_type: "password"
          user: { get_property: [ mysql_database, user ] }
          token: { get_property: [ mysql_database, password ] }

  outputs:
    website_url:
      description: URL for Wordpress wiki.
      value: { get_attribute: [server, public_address] }

